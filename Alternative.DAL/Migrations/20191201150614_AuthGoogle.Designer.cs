// <auto-generated />
using System;
using Alternative.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Alternative.DAL.Migrations
{
    [DbContext(typeof(AlternativeContext))]
    [Migration("20191201150614_AuthGoogle")]
    partial class AuthGoogle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alternative.Model.Entities.Alternative", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaxQuantity");

                    b.Property<string>("Name");

                    b.Property<Guid>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Alternatives");
                });

            modelBuilder.Entity("Alternative.Model.Entities.AlternativesCourses", b =>
                {
                    b.Property<Guid>("AlternativeId");

                    b.Property<Guid>("CourseId");

                    b.HasKey("AlternativeId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("AlternativesCourseses");
                });

            modelBuilder.Entity("Alternative.Model.Entities.Course", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name");

                    b.Property<int>("Semestr");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Alternative.Model.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc8c3fbb-b9ed-4864-a54e-d4e4632f33d3"),
                            ConcurrencyStamp = "a27ff87c-cda0-4ea4-a5fc-1c3a676e1de6"
                        },
                        new
                        {
                            Id = new Guid("92e4bd20-fd8a-4705-aa55-beb98e6a8167"),
                            ConcurrencyStamp = "0cdd1eb7-4ac8-4ae8-ad4a-851bf56243cd"
                        },
                        new
                        {
                            Id = new Guid("b009098d-2ce0-4a42-8f14-1047d0ac6e3e"),
                            ConcurrencyStamp = "ed918f82-38dd-4619-834f-ccb32813f003"
                        });
                });

            modelBuilder.Entity("Alternative.Model.Entities.SpecialityCourses", b =>
                {
                    b.Property<Guid>("SpecialtyId");

                    b.Property<Guid>("CourseId");

                    b.HasKey("SpecialtyId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("SpecialityCourseses");
                });

            modelBuilder.Entity("Alternative.Model.Entities.Specialty", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("Alternative.Model.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("LinkKhNure");

                    b.Property<byte[]>("Photo");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Alternative.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<Guid?>("TeacherId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasFilter("[TeacherId] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Alternative.Model.Entities.UserSpecialty", b =>
                {
                    b.Property<Guid>("SpecialtyId");

                    b.Property<Guid>("UserId");

                    b.HasKey("SpecialtyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSpecialties");
                });

            modelBuilder.Entity("Alternative.Model.Entities.UsersAlternatives", b =>
                {
                    b.Property<Guid>("AlternativeId");

                    b.Property<Guid>("UserId");

                    b.HasKey("AlternativeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersAlternativeses");
                });

            modelBuilder.Entity("Alternative.Model.Entities.Alternative", b =>
                {
                    b.HasOne("Alternative.Model.Entities.Teacher", "Teacher")
                        .WithMany("Alternatives")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alternative.Model.Entities.AlternativesCourses", b =>
                {
                    b.HasOne("Alternative.Model.Entities.Alternative", "Alternative")
                        .WithMany("AlternativesCourses")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alternative.Model.Entities.Course", "Course")
                        .WithMany("AlternativesCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alternative.Model.Entities.SpecialityCourses", b =>
                {
                    b.HasOne("Alternative.Model.Entities.Course", "Course")
                        .WithMany("SpecialityCourseses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alternative.Model.Entities.Specialty", "Specialty")
                        .WithMany("SpecialityCourseses")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alternative.Model.Entities.User", b =>
                {
                    b.HasOne("Alternative.Model.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alternative.Model.Entities.Teacher", "Teacher")
                        .WithOne("User")
                        .HasForeignKey("Alternative.Model.Entities.User", "TeacherId");
                });

            modelBuilder.Entity("Alternative.Model.Entities.UserSpecialty", b =>
                {
                    b.HasOne("Alternative.Model.Entities.Specialty", "Specialty")
                        .WithMany("UserSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alternative.Model.Entities.User", "User")
                        .WithMany("UsersSpecialtys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Alternative.Model.Entities.UsersAlternatives", b =>
                {
                    b.HasOne("Alternative.Model.Entities.Alternative", "Alternative")
                        .WithMany("UsersAlternatives")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Alternative.Model.Entities.User", "User")
                        .WithMany("UsersAlternativeses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
